"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.ConsoleDebugAdapterLogger = void 0;
var ConsoleDebugAdapterLogger = /** @class */ (function () {
    function ConsoleDebugAdapterLogger() {
    }
    /**
     * `console.debug` is just an alias for `.log()`, and we want debug logging to be optional.
     * This class delegates to `console` and overrides `.debug()` to be a no-op.
     */
    ConsoleDebugAdapterLogger.prototype.debug = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        // no-op
    };
    ConsoleDebugAdapterLogger.prototype.error = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        console.error.apply(console, __spreadArrays([message], optionalParams));
    };
    ConsoleDebugAdapterLogger.prototype.info = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        console.info.apply(console, __spreadArrays([message], optionalParams));
    };
    ConsoleDebugAdapterLogger.prototype.trace = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        console.trace.apply(console, __spreadArrays([message], optionalParams));
    };
    ConsoleDebugAdapterLogger.prototype.warn = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        console.warn.apply(console, __spreadArrays([message], optionalParams));
    };
    return ConsoleDebugAdapterLogger;
}());
exports.ConsoleDebugAdapterLogger = ConsoleDebugAdapterLogger;
//# sourceMappingURL=types.js.map